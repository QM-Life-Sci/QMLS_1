---
title: "Progress Check 1 Review Session"
author:
  - Elizabeth King
  - Kevin Middleton
format:
  revealjs:
    theme: [default, custom.scss]
    standalone: true
    self-contained: true
    logo: QMLS_Logo.png
    slide-number: true
    show-slide-number: all
code-annotations: hover
bibliography: QMLS_Bibliography.bib
csl: evolution.csl
---

```{r setup}
#| message: false

library(tidyverse)
library(cowplot)
theme_set(theme_cowplot())

library(palmerpenguins)
island_data <- tibble(
  island = as.character(levels(penguins$island)),
  latitude = c(-64.766667, -65.433333, -64.733333),
  longitude = c( -64.083333, -65.5, -64.233333)
)
```


## Topics for Today

1. PS 4
1. `sample()`
1. Tidy
1. Piping
1. Pivots and joins
1. Probability
1. Clarifying PC 1


## `sample()`

```{r}
#| echo: true

set.seed(37466)

x <- 1:10
sample(x, replace = FALSE)
sample(x, replace = TRUE)
sample(x, size = 5)
```




## Piping

```{r}
#| echo: true

(x <- rnorm(10))
mean(x)
x |> mean()
```


## Piping

```{r}
#| echo: true

D <- tibble(x1 = rnorm(10),
            x2 = runif(10))

D |> pull(x1) |> mean()
D |> pull(x2) |> mean()

D |> summarize(x1 = mean(x1),
               x2 = mean(x2))
```

## Tidy data -- when does it matter?

- The point is to be able to move seamlessly between wide & long format depending on your needs
- Pay attention to organizing data in spreadsheets too!


## Pivots

Shape of your data:

- Wide: rows have multiple columns with values
- Long: rows have 1 column with values


## Wide data

Most common for data entry:

```{r}
#| echo: true

library(palmerpenguins)
head(penguins)
```

Each row is a logical unit (e.g., sample, individual)


## Wide data

```{r}
#| echo: true

island_data
```


## Long data

- Truly "tidy"
- Frequently impractical for data entry (lot of repeated values)
- Often useful for plotting
    - Column name becomes a value for a new variable
    - Cell value becomes the value for that new variable

`pivot_longer()`: wide $\rightarrow$ long

`pivot_wider()`: long $\rightarrow$ wide


## You want this plot

```{r}
penguins_long <- penguins |>
  select(species, sex, body_mass_g, bill_length_mm, bill_depth_mm) |> 
  pivot_longer(cols = -c(species, sex, body_mass_g),
               names_to = "bill_measure",
               values_to = "length") |> 
  drop_na()

ggplot(penguins_long, aes(x = body_mass_g, y = length, color = species)) +
  geom_point(size = 3) +
  scale_colour_viridis_d() +
  facet_grid(bill_measure ~ sex, scales = "free_y")
```


## You need

- `species`
- `sex`
- `body_mass_g`
- `bill_length_mm`
- `bill_depth_mm`

Turn `bill_length_mm` and `bill_depth_mm` into a new column "bill_measure" and values to a column called "length"


## selecting

```{r}
#| echo: true

penguins |>
  select(species, sex, body_mass_g, bill_length_mm, bill_depth_mm)
```

or

```{r}
#| echo: true

penguins[, c("species", "sex", "body_mass_g",
             "bill_length_mm", "bill_depth_mm")]
```


## `pivot_longer()`

```{r}
#| echo: true

penguins_long <- penguins |>
  select(species, sex, body_mass_g, bill_length_mm, bill_depth_mm) |> 
  pivot_longer(cols = c(bill_length_mm, bill_depth_mm),
               names_to = "bill_measure",
               values_to = "length") |> 
  drop_na()
```

or

```{r}
#| echo: true

penguins_long <- penguins |>
  select(species, sex, body_mass_g, bill_length_mm, bill_depth_mm) |> 
  pivot_longer(cols = -c(species, sex, body_mass_g),
               names_to = "bill_measure",
               values_to = "length") |> 
  drop_na()
```


## Long data

```{r}
#| echo: true

penguins_long
```


## Plot

```{r}
#| echo: true
#| output-location: slide

ggplot(penguins_long, aes(x = body_mass_g, y = length, color = species)) +
  geom_point(size = 3) +
  scale_colour_viridis_d() +
  facet_grid(bill_measure ~ sex, scales = "free_y")
```


## Edit values

```{r}
#| echo: true

penguins_long <- penguins_long |> 
  mutate(bill_measure = str_remove(bill_measure, "_mm"),
         bill_measure = str_remove(bill_measure, "bill_"))

head(penguins_long)
```


## `pivot_wider()`

Be careful:

```{r}
#| echo: true

penguins_long |> 
  pivot_wider(id_cols = c(species, sex, body_mass_g),
              names_from = bill_measure, values_from = length)
```


## What happened?

`species`, `sex`, and `body_mass_g` don't uniquely identify new rows

```{r}
#| echo: true

penguins_long |> 
  count(species, sex, body_mass_g)
```

## Paste

```{r}
#| echo: true

penguins <- penguins |> 
  mutate(id_1 = paste(species, seq(1, n()), sep = "_"),
         id_2 = paste0(species, "_", seq(1, n()))) |> 
  relocate(id_1, id_2)
penguins$id_1[1:10]
penguins$id_2[1:10]
```


## Paste

```{r}
#| echo: true

penguins_long <- penguins |>
  select(id_1,species, sex, body_mass_g, bill_length_mm, bill_depth_mm) |> 
  pivot_longer(cols = -c(id_1,species, sex, body_mass_g),
               names_to = "bill_measure",
               values_to = "length") |> 
  drop_na()

penguins_long |> 
  pivot_wider(id_cols = c(id_1, species, sex, body_mass_g),
              names_from = bill_measure, values_from = length)


```


## Tidyverse: joins

> Joining with three tibbles is a little challenging can you help with how you would start this? 

Always joining two tibbles/data.frames: `left_join(left_join(A, B), C)`

What rows do you want to keep?

- `left_join(x, y)`: includes all rows in x.
- `right_join(x, y)`: includes all rows in y.
- `inner_join(x, y)`: includes all rows in x *and* y.
- `full_join(x, y)`: includes all rows in x *or* y.


## Joining

You also have data about the penguins' islands:

```{r}
#| echo: true

island_data
```


## Which way to join?

1. Penguin data into island data
2. Island data into penguin data


## Keys

```{r}
#| echo: true

intersect(colnames(penguins), colnames(island_data))
```


## `left_join()`

```{r}
#| echo: true

left_join(penguins, island_data)
```


## Making new variables

```{r}
#| echo: true

penguins <- penguins |> 
  mutate(log_bill_length = log10(bill_length_mm),
         log_bill_depth = log10(bill_depth_mm))

str(penguins)
```


## Making new variables

```{r}
#| echo: true

penguins$log_body_mass <- log10(penguins$body_mass_g)

str(penguins)
```


## `group_by()` and `summarize()`

1. Split the data into some set of subgroups
2. Apply some function(s) to create new variable(s)
3. Recombine the sets

- Means by species
- Means by species and sex
- Means by species, sex, and island


## Summarizing {.smaller}

```{r}
#| echo: true

penguins |> 
  group_by(species, sex, island) |> 
  summarize(mean_log_mass = mean(log_body_mass),
            mean_log_bill_length = mean(log_bill_length),
            .groups = "drop")
```


## What happened? {.smaller}

- Some `sex` coded as `NA`

```{r}
#| echo: true

penguins |> 
  drop_na(sex) |> 
  group_by(species, sex, island) |> 
  summarize(mean_log_mass = mean(log_body_mass),
            mean_log_bill_length = mean(log_bill_length),
            .groups = "drop")
```


## Data visualization

> 


## Working with aesthetics

```{r}
penguins <- penguins |> 
  drop_na(body_mass_g)
```

```{r}
#| echo: true

ggplot(penguins, aes(body_mass_g, fill = species)) +
  geom_density()
```


## Working with aesthetics

```{r}
#| echo: true

ggplot(penguins, aes(body_mass_g, fill = species)) +
  geom_density(alpha = 0.5)
```


## Working with aesthetics

```{r}
#| echo: true

penguins <- penguins |> 
  mutate(species_alpha = case_when(
    species == "Adelie" ~ 1,
    species == "Chinstrap" ~ 0.5,
    species == "Gentoo" ~ 0.25
  ))
penguins |> select(species, species_alpha) |> slice_sample(n = 10)
```


## Working with aesthetics

```{r}
#| echo: true

ggplot(penguins, aes(body_mass_g, fill = species,
                     alpha = species_alpha)) +
  geom_density()
```


## Working with aesthetics

```{r}
#| echo: true

library(ggridges)
ggplot(penguins, aes(x = body_mass_g, y = species, fill = species)) +
  geom_density_ridges(alpha = 0.5)
```


## Working with aesthetics

> Is there any method to decide a "good number" of bins considering the number of observations we have?

```{r}
#| echo: true

ggplot(penguins, aes(body_mass_g, color = species, fill = species)) +
  geom_histogram(bins = 30, alpha = 0.5)
```


## Working with aesthetics

```{r}
#| echo: true

ggplot(penguins, aes(log_bill_length, log_bill_depth, color = species,
                     size = log_body_mass)) +
  geom_point()
```


## Working with aesthetics

- color
- shape
- size
- linetype
- fill
- alpha
- text parameters

All are context-specific


## Probability 

> I'm still struggling a bit with probability. I have a tendency to overthink and overcomplicate probability which often times causes me to second guess myself and make mistakes.


## Temperature dependent sex determination

<center>
<img src="https://i.imgur.com/GBXvrf9.jpg" width="70%" />
</center>


## Temperature dependent sex determination

Above the critical temperature ($Above~T_c$)

- $Pr[Female] = 0.8$
- $Pr[Male] = 0.2$

Below the critical temperature ($Below~T_c$)

- $Pr[Female] = 0.5$
- $Pr[Male] = 0.5$


## How to *preferentially* collect female eggs?

You want to collect an egg from a nest and estimate what the temperature was in that nest when sex was determined.

- You want to preferentially collect from nests with large numbers of females
- The temperature now is not necessarily what it was (so you can't use a thermometer)

What is the probability that the nest was above $T_c$, given that you have collected a female egg?


## Variables

- $Pr[Female | Above~T_c] = 0.8$
- $Pr[Female | Below~T_c] = 0.5$


## Bayes' rule

$$Pr[A | B] = \frac{Pr[B | A] \cdot Pr[A]}{Pr[B]}$$

We want: *probability of $T_c$ given that we have observed a $Female$*

$$Pr[Above~T_c | Female]$$

So:

- $A$ is $Above~T_c$
- $B$ is $Female$


## Bayes' rule

$$Pr[Above~ T_c | F] = \frac{Pr[F | Above~T_c] \cdot Pr[Above~T_c]}{Pr[F]}$$

We have:

- $Pr[F | Above~T_c] = 0.8$

We need:

- $Pr[Above~T_c]$
- $Pr[F]$


## Estimating $Pr[Above~T_c]$?

Without any additional information about the distribution of $Above~T_c$ among nests:

$$Pr[Above~T_c] = 0.5$$

- Equal probability that a nest is above $T_c$ or below.
- Choose some other probability if we have *a priori* information.


## Bayes' rule

$$Pr[Above~T_c | F] = \frac{Pr[F | Above~T_c] \cdot Pr[Above~T_c]}{Pr[F]}$$

We have:

- $Pr[F | Above~T_c] = 0.8$
- $Pr[Above~T_c] = 0.5$

We need:

- $Pr[F]$


## Conditional probability

```{r}
#| fig-align: center

library(ggflowchart)

FC <- tribble(
  ~ from, ~ to,
  "Temperature", "Above Tc\n0.5",
  "Temperature", "Below Tc\n0.5",
  "Above Tc\n0.5", "Pr[Female]\n0.8",
  "Above Tc\n0.5", "Pr[Male]\n0.2",
  "Below Tc\n0.5", "Pr[Female]\n0.5",
  "Below Tc\n0.5", "Pr[Male]\n0.5",
  "Pr[Female]\n0.8", "Female, Above Tc\n0.40",
  "Pr[Male]\n0.2", "Male, Above Tc\n0.10",
  "Pr[Female]\n0.5", "Female Below Tc\n0.25",
  "Pr[Male]\n0.5", "Male Below Tc\n0.25"
)

ggflowchart(FC,
            horizontal = TRUE,
            arrow_size = 0.25,
            text_size = 4,
            x_nudge = 0.3,
            y_nudge = 0.3)
```

$Pr[F]$ is the sum of the two ways to get a Female egg.


## Bayes' rule

\begin{align}
Pr[F] = & Pr[F | Above~T_c] \cdot Pr[Above~T_c] + \\
        & Pr[F | Below~ T_c] \cdot Pr[Below~T_c]
\end{align}

So:

\begin{align}
Pr[F] & = 0.5 \cdot 0.5 + 0.5 \cdot 0.8 \\
      & = 0.25 + 0.4 \\
      & = 0.65
\end{align}


## Bayes' rule

\begin{align}
Pr[Above~T_c | F] & = \frac{Pr[F | Above~T_c] \cdot Pr[Above~T_c]}{Pr[F]}\\
                  & = \frac{0.8 \cdot 0.5}{0.65} \\
                  & = \frac{0.40}{0.65} \\
                  & = 0.62
\end{align}

Given a female egg, the probability that the nest was above $T_c$ is 0.62.


## Solving with natural numbers

```{r}
FC2 <- tribble(
  ~ from, ~ to,
  "Temperature", "Above Tc\n0.5",
  "Temperature", "Below Tc\n0.5",
  "Below Tc\n0.5", "Pr[Male]\n0.5",
  "Below Tc\n0.5", "Pr[Female]\n0.5",
  "Above Tc\n0.5", "Pr[Male]\n0.2",
  "Above Tc\n0.5", "Pr[Female]\n0.8",
  "Pr[Male]\n0.5", "Male\n0.5 * 0.5 = 0.25",
  "Pr[Female]\n0.5", "Female\n0.5 * 0.5 = 0.25",
  "Pr[Male]\n0.2", "Male\n0.5 * 0.2 = 0.1",
  "Pr[Female]\n0.8", "Female\n0.5 * 0.8 = 0.4"
)

ggflowchart(FC2,
            horizontal = TRUE,
            arrow_size = 0.25,
            text_size = 4,
            x_nudge = 0.25)

```


## Solving with natural numbers

```{r}
#| fig-align: center
#| fig-height: 4

FC3 <- tribble(
  ~ from, ~ to,
  "Temperature\n100", "Above Tc\n0.5 * 100 = 50",
  "Temperature\n100", "Below Tc\n0.5 * 100 = 50",
  "Below Tc\n0.5 * 100 = 50", "Pr[Male]\n0.5 * 50 = 25",
  "Below Tc\n0.5 * 100 = 50", "Pr[Female]\n0.5 * 50 = 25",
  "Above Tc\n0.5 * 100 = 50", "Pr[Male]\n0.2 * 50 = 10",
  "Above Tc\n0.5 * 100 = 50", "Pr[Female]\n0.8 * 50 = 40",
  "Pr[Male]\n0.5 * 50 = 25", "Male\n25",
  "Pr[Female]\n0.5 * 50 = 25", "Female\n25",
  "Pr[Male]\n0.2 * 50 = 10", "Male\n10",
  "Pr[Female]\n0.8 * 50 = 40", "Female\n40"
)

ggflowchart(FC3,
            horizontal = TRUE,
            arrow_size = 0.25,
            text_size = 4,
            x_nudge = 0.25)
```
$$\frac{40}{40 + 25} = \frac{40}{65} = 0.62$$


## Clarifying PC 1

> Can you explain what is being asked in the paragraph below? "Using your long dataset that has the 40.04 value replaced with 4.04, merge the EVI dataset (`EVI.csv`) with the soil respiration data..."

> In the question joining the EVI.csv data set, the problem says that "that the EVI dataset does not currently have unique indicators (or key values) to merge with the soil respiration data", but both sets have Rs values. Why couldn't you modify the Rs outlier on the EVI set and then join them on Rs values? What would be the advantage to creating unique IDs?


## Clarifying PC 1

> When the assignment asks us to stack graphs vertically, is it wanting the vertical axis aligned or is it wanting one graph on top of another positionally?

> I'm confused about the part of code asking "For the pairwise combinations of `host_race` and `plant_choice`, tally up the number of ovipositions for each. Assign this tibble to `gall_counts`."


