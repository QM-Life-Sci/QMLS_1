---
title: "Distributions & Tail Probabilities"
author:
  - Elizabeth King
  - Kevin Middleton
format:
  revealjs:
    theme: [default, custom.scss]
    standalone: true
    self-contained: true
    logo: QMLS_Logo.png
    slide-number: true
    show-slide-number: all
code-annotations: hover
bibliography: QMLS_Bibliography.bib
csl: evolution.csl
---

```{r}
#| label: setup
#| echo: false

library(tidyverse)
library(cowplot)
theme_set(theme_cowplot())

source("https://raw.githubusercontent.com/QM-Life-Sci/QMLS_1/refs/heads/main/Lectures/QMLS_functions.R")

```

## A miscellanea of distributions {.nostretch}

![](https://i.imgur.com/Mks8NPD.png"){fig-align="center" width="80%"}


## Random normal values

- Generate 100,000 values from a normal distribution with a mean of 5 and a standard deviation of 1
- Generate 100,000 values from a normal distribution with a mean of 5 and a standard deviation of 5

```{r}
#| echo: true

set.seed(832476)
sd1 <- tibble(y = rnorm(100000, 5, 1))
sd5 <- tibble(y = rnorm(100000, 5, 5))
```


## Plots of random normal values

```{r echo=FALSE}
p1 <- sd1 %>% ggplot(aes(y)) +
  geom_histogram(bins = 50) +
  labs(y = "Count")
p2 <- sd5 %>% ggplot(aes(y)) +
  geom_histogram(bins = 50) +
  labs(y = "Count")

plot_grid(p1, p2, ncol = 2)
```


## What proportion of values from each set are above 7?

```{r}
#| echo: true

nrow(sd1[sd1$y > 7, ]) / nrow(sd1)
nrow(sd5[sd5$y > 7, ]) / nrow(sd5)
```


## Use `pnorm()` to calculate the probability of observing a value of 7 or greater for each distribution.

```{r}
#| echo: true

pnorm(7, mean = 5, sd = 1, lower.tail = FALSE)
pnorm(7, mean = 5, sd = 5, lower.tail = FALSE)
```

Compare the values returned by `pnorm()` to the proportions on the previous slide.


## Tail probabilities

```{r}
#| echo: true
#| fig-align: center

shade_normal(0.025, tail = "both")
qnorm(0.025)
```


## *t* Distribution

```{r}
#| echo: true
#| fig-align: center

shade_t(0.025, df = 5)
qt(0.025, df = 5)
```

## Calculating exact confidence intervals

Multiply the *SEM* by the *t*-value encompassing 95% for a *t* distribution with a given degrees of freedom (e.g., *n*-1).

```{r}
#| echo: false
#| warning: false
#| fig-height: 5
#| fig-align: center

x <- seq(-2.5, 2.5, by = 0.01)

sim <- tibble(df = c(2, 5, 20)) %>%
  group_by(df) %>%
  do(tibble(x = x, y = dt(x, .$df))) %>%
  mutate(Parameters = paste0("df = ", df)) %>%
  ungroup() %>%
  mutate(Parameters = factor(Parameters, levels = unique(Parameters)))

norm <- tibble(
  x = x,
  y = dnorm(x, 0, 1))

pal <- palette()[2:4]

ggplot() +
  geom_line(data = norm, aes(x, y), size = 3) +
  geom_line(data = sim, aes(x, y, color = Parameters), size = 1.5) +
  scale_color_manual(values = pal, name = "Degrees of\nFreedom") +
  labs(x = "t", y = "Relative Likelihood") +
  theme(legend.position = c(0.85, 0.75))
```


## *t* Distribution approaches a normal as df increases

```{r}
#| echo: true

qt(0.975, 10 - 1)

qt(0.975, 100 - 1)

qt(0.975, 1000000000 - 1)

qnorm(0.975, 0, 1)
```


## Calculating exact confidence intervals

```{r}
#| echo: false

shade_t(0.025, 5) +
  ggtitle(TeX("$t$-distribution with df = 5"))
```

Need the critical value that marks the 2.5% cutoff at each tail.


## Example CI calculation

```{r}
#| echo: true

undulation_rate <- c(0.9, 1.2, 1.2, 1.3, 1.4, 1.4, 1.6, 2.0)

undulation_mean <- mean(undulation_rate)
undulation_SEM <- sd(undulation_rate) / sqrt(length(undulation_rate))


lower_approx <- undulation_mean - 2 * undulation_SEM
upper_approx <- undulation_mean + 2 * undulation_SEM

c(lower_approx, undulation_mean, upper_approx)


crit <- qt(0.025, df = 8 - 1, lower.tail = FALSE)

lower <- undulation_mean - crit * undulation_SEM
upper <- undulation_mean + crit * undulation_SEM

c(lower, undulation_mean, upper)


```


## *F* Distribution

```{r}
#| echo: true
#| fig-align: center

shade_F(0.05, df1 = 2, df2 = 10)
qf(0.05, df1 = 2, df2 = 10, lower.tail = FALSE)
```


## $\chi^2$ Distribution

```{r fig.height = 3}
#| echo: true
#| fig-align: center

shade_chisq(0.05, df = 2)
qchisq(0.05, df = 2, lower.tail = FALSE)
```


## Why do we always seem to use 0.05 or 0.025?

5% is a special number - the arbitrary threshold for statistical significance

:::: {.columns}

::: {.column width="50%"}

```{r}
#| fig-height: 7

shade_normal(0.025, tail = "both") +
  theme(text = element_text(size = 24))
```

:::

::: {.column width="50%"}

```{r}
#| fig-height: 7

shade_normal(0.05, tail = "upper") +
  theme(text = element_text(size = 24))
```

:::

::::

## We could choose any probability for any distribution

```{r}
#| echo: true
#| fig-align: center

shade_normal(0.34, tail = "upper")
```


## The `r`, `d`, `p`, and `q` functions for distributions {.smaller}

Example for a normal distribution (Specify `mean` and `sd` or defaults is standard normal: $\mu = 0$, $\sigma = 1$):

1. `rnorm(n, ...)`: `n` random draws
1. `dnorm(x, ...)`: Relative likelihood (density) at `x` values
1. `pnorm(q, ...)`: (Lower) tail probability for a quantile `q` 
1. `qnorm(p, ...)`: Quantile for a given (lower) tail probability `p`

- `lower.tail = FALSE` for the upper tail
- `log = TRUE` for log-probability


## `rnorm(n=50, mean=0, sd=1)`


```{r}
#| echo: true

set.seed(387493)
RR <- tibble("values" = rnorm(50,0,1))

```


:::: {.columns}

::: {.column width="40%"}

```{r}
#| echo: false

shade_normal(0, tail = "both")

```

:::

::: {.column width="20%"}

```{r}
#| echo: false

RR

```

:::

::: {.column width="40%"}

```{r}

ggplot(RR, aes(values)) + 
geom_dotplot() +
scale_y_continuous(NULL, breaks = NULL) +
xlim(c(-4, 4))

```

:::

::::


## `dnorm(x=1, mean=0, sd=1)`

```{r}
#| echo: true

dnorm(x = 1, mean = 0, sd = 1)
```

```{r}
M <- tibble(x = seq(-4, 4, length = 200),
            y = dnorm(x))

p <- ggplot(M, aes(x, y)) +
  geom_line() +
  geom_hline(yintercept = dnorm(1), linetype = "dashed") +
  geom_vline(xintercept = 1) +
  annotate("text", x = 4, y = dnorm(1) + 0.02, label = round(dnorm(1),4)) +
  labs(x = "Value", y = "Relative Likelihood") +
  scale_x_continuous(breaks = -4:4)

p

```


## `pnorm(q=1, mean=0, sd=1)`

```{r}
#| echo: true

pnorm(q = 1, mean = 0, sd = 1)

```

```{r}
#| echo: false

shade_normal(0.8413447, tail = "lower")

```


## `qnorm(p=0.841, mean=0, sd=1)`


```{r}
#| echo: true

qnorm(p = 0.841, mean = 0, sd = 1)

```

```{r}
#| echo: false

pp <- shade_normal(0.8413447, tail = "lower") +
  geom_vline(xintercept = 1) +
  scale_x_continuous(breaks = -4:4)

pp
  
```

