---
title: 'Problem Set 06'
author: "Your Name Here: Group X"
date: 'Last updated: `r Sys.Date()`'
format:
  html:
    toc: true
    number-depth: 3
    toc-location: left
    embed-resources: true
---

```{r}
#| label: setup
#| message: false
#| warning: false

# FIXME
library(tidyverse)
library(readxl)
library(performance)
library(cowplot)
theme_set(theme_cowplot())

# Datasets
#   Stalkies.csv
#   Earwigs.csv

```


## Differences between group means

Stalk-eyed flies are a clade of flies whose eyes are at the ends of long projections (stalks) on either side of their head. Shortly after emerging from a pupae, these flies ingest air through their mouth in order to pump it into these stalks to elongate them ([watch this amazing process here](https://www.youtube.com/watch?v=ZGdfIX5x8XM)). 

Females prefer males with wider eye spans. See the photo below:

![](https://i.imgur.com/7KxZKQF.jpg){fig-align="center"}

The `Stalkies.csv` data file contains data for an experiment in which male stalk-eyed flies were reared on different food sources (corn and cotton). The hypothesis is that food type affects eye span. In this exercise, you will try to answer this question.


### Activity

Load the `Stalkies.csv` file and examine the columns of data it contains.

```{r}
# FIXME

stalk <- read_csv("../data/Stalkies.csv", show_col_types = FALSE)
glimpse(stalk)
```

Visualize the dataset in two different ways by making two different plots:

1. Make a boxplot showing each food type on the x axis. Use the standard `geom_boxplot()`.
2. Plot the raw data (points) for the two groups. For the points, include jitter and transparency. Include means and standard errors plotted in a different color (the code in Lecture 05-2 might help you). Try a few different values for each of these elements (jitter, color, transparency) to find a plot you feel best communicates the structure of the data. You will find that the number of data points you have will affect how much jitter & transparency is most appropriate. Change the axis labels to what you would expect to find on a publication ready figure.

```{r}
# FIXME

ggplot(stalk, aes(x = food_source, y = eye_span)) +
  geom_boxplot() +
  labs(x = "Food Source", y = "Eye Span")

ggplot(stalk, aes(x = food_source, y = eye_span)) +
  geom_point(position = position_jitter(width = 0.05), alpha = 0.5) +
  stat_summary(fun = mean, geom = "point", size = 3, color = "red") +
  stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.05,
               color = "red", linewidth = 0.7) +
  labs(x = "Food Source", y = "Eye Span")
```

Describe the distributions within each group and between groups. What do these plots tell you? Do you have a prediction for what your statistical tests will show?

> The mean eye span is higher for flies reared on corn than on cotton. The variance also appears to be greater for flies reared on cotton. Based on the standard errors, I predict there will be a significant difference between these groups.

Calculate the per-food source mean, standard deviation, and variance.

```{r}
# FIXME

stalk |> 
  group_by(food_source) |> 
  summarise(mean_eye_span = mean(eye_span),
            sd_eye_span = sd(eye_span),
            var_eye_span = var(eye_span))
```

How do the mean, standard deviation, and variance compare? Do they match your intuition above?

> Mean eyespan is about 0.5 higher in corn-fed flies. Standard deviation is about 4x higher in cotton, and variance is 14x higher.

`lm()` is a general function that fits many many different kinds of linear models. We will use `lm()` almost exclusively in the coming units.

1. Fit a linear model using `lm()` where `eye_span` is modeled by `food_source`.
2. Pass the object that you just created to the function `summary()` to generate the model summary.

```{r}
# FIXME

fm <- lm(eye_span ~ food_source, data = stalk)
summary(fm)
```

Examine the coefficients in the model summary. Try to reconcile the values in the `Estimate` column for the rows: `(Intercept)` and `food_sourceCotton` with the means you calculated above.

> The intercept is identical to the mean for the corn group. The second row in the coefficients `food_sourceCotton` is the same value as the difference between the mean for Corn and the mean for Cotton. So this row represents the mean difference between Corn and Cotton.

We will investigate the other parts of this summary in the coming units. Next, we will use a *t*-test to estimate the difference in means in the two treatments.

By default, the `t.test` function will perform a test that *does not* assume equal variances (called "Welch's Correction"). You may specify equal variances with `var.equal = TRUE`, *if you decide that is appropriate here*. Refer back to to the summaries (mean, sd, variance) you calculated above.

Perform a *t*-test using the formula method to specify the groups to test. The formula will be identical to the formula for `lm()`. Print the results.

```{r}
# FIXME

myT <- t.test(eye_span ~ food_source, data = stalk)
myT
```

Study the printed output of `t.test()`. Do you find the means for the Corn and Cotton groups? Do these match your calculation above?

> Corn: 2.04; Cotton: 1.54. Yes, these are identical

`t.test()` is a function that performs a very specific task: carrying out a *t*-test (by default with Welch's correction for unequal variances). A *t*-test is just a special kind of linear model (1 categorical predictor with 2 levels), so we can also fit the same model using `lm()`. There are a few different kinds of *t*-test that you can do with `t.test()`, but all of them are just specific kinds of linear models.


## Bivariate Regression

The file `Earwigs.csv` contains data for the proportion of earwigs in a sample that have forceps and associated data on the population density of earwigs. An earwig with forceps is shown below.

![](https://i.imgur.com/YJ0NnSb.jpg){fig-align="center"}

The hypothesis is that earwigs living at higher densities will be more likely to have forceps, so that samples living at higher densities will have a higher proportion with forceps.


### Activity

Load the earwigs data:

```{r}
# FIXME

EW <- read_csv("../data/Earwigs.csv", show_col_types = FALSE)
```

Make a scatterplot of the proportion of earwigs with forceps vs. density. Feel free to change the point color and change the axis titles.

```{r}
# FIXME

P <- EW |>
  ggplot(aes(Density, Proportion_Forceps)) +
  geom_point(size = 3, color = "navy") +
  labs(x = "Population Density", y = "Proportion with Forceps")
P
```

Use the following code to add a regression line through the points to your plot: `+ geom_smooth(formula = y ~ x, method = "lm")`. Just add that code after `geom_point()` in your call to `ggplot()`. This adds a line fit to the model `y ~ x` using `lm()` (there are other options for `geom_smooth()`). By default, ggplot will add ribbons for the confidence interval around the line (`se = TRUE`).

```{r}
# FIXME
P + geom_smooth(formula = y ~ x, method = "lm")
```

Use `lm()` to fit a linear model in which the proportion of earwigs with forceps is modeled by the density of earwigs. Assign the linear model to an object (name it `fm` for "fitted model"), and then pass that object to `summary()` as you did above.

```{r}
# FIXME

fm <- lm(Proportion_Forceps ~ Density, data = EW)
summary(fm)
```

If the data meet the assumptions, what do you expect from the Minimum, Maximum, 1st and 3rd quartiles, and median of the residuals?

> The minimum and maximum should be roughly equal. The 1st and 3rd qartiles should be similar. And the median should be close to zero.

Inspect the printed summary. Particularly look at the Residuals lines. Does it appear that the model meets the assumptions of bivariate regression?

> Yes, it appears so. The minimum and maximum are roughly equal. The 1st and 3rd qartiles are similar. And the median should is close to zero.

One plot that is useful to make when checking model diagnostics is a plot of the residuals vs. the fitted values. The fitted values are the predicted y values (proportion with forceps) at each observed x values (population density).

The `lm()` object you created above (`fm`) contains these elements in `$residuals` and `$fitted.values`. In the chunk below:

- Use `mutate()` to assign these values to two new columns to the earwigs data
- Make a scatterplot of residuals vs. fitted values. Add a dotted horizontal line at 0 with the code `geom_hline(yintercept = 0, linetype = "dotted")`.

```{r}
# FIXME

EW <- EW |> 
  mutate(Residuals = fm$residuals,
         `Fitted Values` = fm$fitted.values)

ggplot(EW, aes(y = Residuals, x = `Fitted Values`)) +
  geom_point(size = 3, color = "navy") +
  geom_hline(yintercept = 0, linetype = "dotted")
```

If you inspect this plot, you will see that the points are scattered around the line at 0, with no obvious pattern.

Finally, we will use functions to further evaluate the assumptions of this bivariate regression. Check the model assumptions using the `performance` package by checking the following:

- posterior predictive check
- linearity
- homogeneity of variance
- influential observations
- normality of residuals

You may need to install the `performance` and `qqplotr` packages first.

```{r}

PP <- plot(check_model(fm, panel = FALSE))
PP

check_heteroskedasticity(fm)
check_normality(fm)
check_outliers(fm)
```

Do you see anything that concerns you about moving ahead?

> There is one sort-of large residual at -0.3, but the rest of the diagnostics look fine as are confirmed by the explicit tests,

Return to the model output. See if you can figure out what the coefficients represent. You will find estimates for the slope and intercept of the line, their respective standard errors,^[Remember that standard errors tell us about the uncertainty in parameter estimates] and a *t*-test, which tests each parameter estimate vs. 0. Try to figure out how the *t*-value is calculated (divide one column by another). We will talk more about all these values in the next units.

> The OLS line is Proportion_Forceps = 0.002 + 0.015 * Density. The standard errors are 0.11 and 0.005. The *t*-statistics are the estimates divided by their SEs.

We have one final issue to think about. The data we gave you here is a proportion. What is another format that the data could have been in? Think about the source of the proportion values.

> A proportion could also be represented as a binomial (where "has forceps" is a "success").


## Working with lists

Lists are one of the most flexible data structures in R. They can hold any combination of other types of R objects (including other lists). R functions like `lm()` return lists.^[R functions can only return a single object (unlike languages like python and MATLAB, which can return multiple objects). So everything that needs to be returned from a function is placed into a list, which gets returned.]

Lists are indexed a little differently from vectors and matrices. List indices are indexed using double brackets: `[[1]]` extracts (or assigns) the first element. Run the following code:

```{r}
mylist <- list()
mylist[[3]] <- 24
mylist
```

We first create an empty list, using the `list()` function. The second line assigns 24 to the 3rd element. When we print the list (last line), you can see that the 1st and 2nd elements are created and left as `NULL`. Managing lists can be harrowing:

```{r}
mylist[[1]] <- "hello world"
mylist[[2]] <- list(x = 12, y = "y", z = seq(1, 5, by = 0.2))
mylist
```

Now the 1st element has a string, the 2nd has a list (which itself contains a numeric, a string, and a vector). How would you extract the 3rd element from the `z` vector?

```{r}
# FIXME
mylist[[2]]$z[3]
```

We will use lists in a much less convoluted way, which is what you should do until you get comfortable (once you are comfortable with lists, their immense flexibility makes them a great way to pass collections of different kinds of data around among code).

For now, we will use a list to hold 4 plots, which we will arrange in a grid to make a usable figure.


### Activity

The file `mammals.xlsx` contains data for about 50 different traits. *All* 5,416 species of mammals are included in the file, though none has data for all traits. We want to make some quick plots of four different traits plotted against body mass.

Rather than creating separate plots, we want to make them inside a loop, where we iterate through the columns of interest. This will make it easy to modify the format of the plots all at once, reducing the amount of code to keep up with. For example, change all the points to be transparent in one line rather than in four places.

1. Load the data from `mammals.xlsx`.
2. Create a column that holds the log10 transformation of `adult_body_mass_g` and one for the log10 of `basal_met_rate_m_l_o2hr`.
3. Create a vector of strings that we will use to iterate through the columns for analysis (we used `cols_analyze`). It should contain the following strings:
    - `ageat_eye_opening_d`
    - `log_BMR1` (or whatever you called the log10 of `basal_met_rate_m_l_o2hr`)
    - `gestation_len_d`
    - `litter_size`
4. Create a vector of strings to use for the y axis labels. Make sure that the order matches the order in your vector #3.
5. Create an empty list to hold plots: `pp <- list()` for example.

This is all we need for the setup. At this point, you have the data, two vectors (one of columns names and one of y axis labels), and an empty list.

```{r}
# FIXME
M <- read_excel("../data/mammals.xlsx", na = "NA") |>
  mutate(log_Mass = log10(adult_body_mass_g),
         log_BMR = log10(basal_met_rate_m_l_o2hr))

cols_analyze <- c("ageat_eye_opening_d",
                  "log_BMR",
                  "gestation_len_d",
                  "litter_size")

axis_labels <- c("Age at Eye Opening",
                 "log10 BMR",
                 "Gestation Length",
                 "Litter Size")

M <- M |> 
  select(log_Mass, all_of(cols_analyze)) |> 
  drop_na(log_Mass)

pp <- list()
```

No we can work on a loop to iterate through the columns, making a plot for each column. Here is the [pseudocode](https://blog.usejournal.com/how-to-write-pseudocode-a-beginners-guide-29956242698):

1. Create the framework for a `for` loop.
    - We want to iterate from 1 to `length(cols_analyze)`
2. Extract the *ii*th element of the columns to analyze vector. Assign to an object `col`. Check that it's a string.
3. Extract the *ii*th element of the y-axis label to `lab`.
4. Make a bivariate plot of the column vs. log Body Mass (assign to an object). This will look a little different from ggplots you have made before, particularly the aesthetics. Because you are supplying raw strings, you need to use the `.data` object, which is what ggplot uses internally to keep track of data. It will look something like: `aes(x = .data[["log_Mass"]], y = .data[[col]])` depending on what variable name you used for log-Body mass.
5. Assign the plot to the *ii*th element of your list.

```{r}
# FIXME
for (ii in 1:length(cols_analyze)) {
  col <- cols_analyze[ii]
  lab <- axis_labels[ii]
  
  p <- ggplot(M, aes(x = .data[["log_Mass"]], y = .data[[col]])) +
    geom_point(alpha = 0.5, size = 0.5) +
    labs(x = "log10 Body Mass (g)", y = lab) +
    theme(axis.text = element_text(size = 10),
          axis.title = element_text(size = 10))
  pp[[ii]] <- p
}
```

At the end of the loop you will have a list that contains 4 plots. Try printing a plot by running `pp[[1]]` at the command line. If you get warnings saying something like `Removed ... rows containing missing values (geom_point).`, that is just ggplot saying that there are `NA`s in the data. A nice fix-up would be to go back to the data and `drop_na()` for the *ii*th column before you plot.

Now you can make a 2x2 grid of plots. The `cowplot` function `plot_grid()` can take a list of plots as an argument: `plotlist = ...`. Pass your list of plots, and specify 2 columns and 2 rows (check the help for `?plot_grid`).

```{r}
# FIXME
plot_grid(plotlist = pp, ncol = 2, nrow = 2,
          labels = c("a", "b", "c", "d"),
          label_size = 8)
```

Now you can fine tune the plots in the code chunk above:

- Add labels for the x and y axes. The y label is the `lab` string you extracted from your vector of y axis labels.
- Make the points smaller (`size = 0.5`) and transparent
- Change the font size on the axis labels by adding the following code to your ggplot:

```
+ theme(axis.text = element_text(size = 10),
        axis.title = element_text(size = 10))
```

- Pass the argument `labels = c("a", "b", "c", "d")` to `plot_grid()` to add labels for each plot.

As you can see rather than sequentially editing 4 sets of code, trying to make sure they all stay in sync, we can just edit one plotting statement and change the data in each iteration.
